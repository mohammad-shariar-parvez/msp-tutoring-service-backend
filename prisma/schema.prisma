// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  role             String            @default("user")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviewAndRatings ReviewAndRating[]
  bookings         Booking[]
  blogs            Blog[]
  feedbacks        Feedback[]
  payment          Payment[]
  profile          Profile?

  @@map("users")
}

model CourseTutor {
  id         String   @id @default(uuid())
  firstName  String
  middleName String
  lastName   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  experience String
  bio        String
  imageUrl   String
  gender     String
  courses    Course[]

  @@map("courseTutors")
}

model Profile {
  id           String   @id @default(uuid())
  firstName    String?
  lastName     String?
  middleName   String?
  profileImage String?
  useEmail     String?
  contactNo    String?
  bio          String?
  userId       String   @unique
  role         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  iat          Int?
  exp          Int?
  user         User     @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Service {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]

  @@map("services")
}

model Course {
  id               String            @id @default(uuid())
  title            String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  location         String
  price            Float
  imageUrl         String
  duration         String?
  status           CourseStatus      @default(RUNNING)
  description      String
  article          String?
  serviceId        String
  courseTutorId    String
  service          Service           @relation(fields: [serviceId], references: [id])
  courseTutor      CourseTutor       @relation(fields: [courseTutorId], references: [id])
  reviewAndRatings ReviewAndRating[]
  bookings         Booking[]

  @@map("courses")
}

model ReviewAndRating {
  id     String @id @default(uuid())
  review String
  rating Int
  userId String

  courseId String
  user     User   @relation(fields: [userId], references: [id])
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review_and_rating")
}

model Booking {
  id String @id @default(uuid())

  status    Status @default(PENDING)
  startDate String
  startTime String
  userId    String
  courseId  String
  user      User   @relation(fields: [userId], references: [id])
  course    Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payment   Payment?

  @@map("bookings")
}

// Blog model to store blog posts
model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  // ... other blog-related fields ...

  @@map("blogs")
}

model Question {
  id          String   @id @default(uuid())
  name        String
  location    String
  phone       String
  requirement String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ... other blog-related fields ...

  @@map("questions")
}

model Feedback {
  id          String @id @default(uuid())
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  // ... other blog-related fields ...

  @@map("feedbacks")
}

// FAQ model to store frequently asked questions
model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ... other FAQ-related fields ...

  @@map("faqs")
}

model Payment {
  id            String        @id @default(uuid())
  amount        String
  paymentDate   DateTime      @default(now()) @map("payment_date")
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  userId    String
  bookingId String  @unique
  user      User    @relation(fields: [userId], references: [id])
  booking   Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

enum Status {
  PENDING
  BOOKED
}

enum Role {
  admin
  customer
}

enum PaymentStatus {
  PENDING
  PAID
}

enum CourseStatus {
  RUNNING
  UPCOMMING
}
