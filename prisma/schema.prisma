// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  role             String            @default("user")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  reviewAndRatings ReviewAndRating[]
  courseTutors     CourseTutor[]
  bookings         Booking[]
  blogs            Blog[]
  faqs             FAQ[]

  @@map("users")
}

model Tutor {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("tutors")
}

model Profile {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("profiles")
}

model Service {
  id    String @id @default(uuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course[]

  location String
  price    Float

  @@map("services")
}

model CourseTutor {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@map("course_tutors")
}

model Course {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceId        String
  service          Service           @relation(fields: [serviceId], references: [id])
  reviewAndRatings ReviewAndRating[]
  courseTutors     CourseTutor[]
  bookings         Booking[]

  @@map("courses")
}

model ReviewAndRating {
  id     String @id @default(uuid())
  review String
  rating Int
  userId String

  courseId String
  user     User   @relation(fields: [userId], references: [id])
  service  Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review_and_rating")
}

model Booking {
  id     String @id @default(uuid())
  userId String

  status    Status   @default(PENDING)
  startDate DateTime
  endDate   DateTime
  courseId  String

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("booking")
}

// Blog model to store blog posts
model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  // ... other blog-related fields ...
}

// FAQ model to store frequently asked questions
model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  // ... other FAQ-related fields ...
}

enum Status {
  PENDING
  BOOKED
}

enum Role {
  admin
  customer
}

enum PaymentStatus {
  PENDING
  PARTIAL_PAID
  FULL_PAID
}
